author: Joshua Fontany
core-version: >=5.1.14
created: 20171117004758253
dependents: $:/plugins/telarus/fontawesome
description: A Json Mangler Plugin for TiddlyWiki
list: readme license
modified: 20171117004758253
plugin-type: plugin
source: https://github.com/joshuafontany/TW5-JsonManglerPlugin
title: $:/plugins/telarus/jsonmangler
type: application/json
version: 0.2.0

{
    "tiddlers": {
        "$:/plugins/telarus/jsonmangler/editTemplate/Json": {
            "title": "$:/plugins/telarus/jsonmangler/editTemplate/Json",
            "created": "20170706182727913",
            "creator": "Josh F",
            "flat": "true",
            "list-after": "$:/core/ui/ViewTemplate/classic",
            "modified": "20171116233651242",
            "modifier": "Josh F",
            "tags": "$:/tags/EditTemplate",
            "type": "text/vnd.tiddlywiki",
            "text": "\\define archive() $:/archive/json/$(thisJson)$\n\n<$list filter=\"[is[current]type[application/json]]\">\n<div class=\"json-tools\">\n<$jsonmangler title=<<currentTiddler>> >\n<!-- /* Refresh Json */ -->\n<$button tooltip=\"Refresh Json Formatting\" class=\"nottc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 1em; padding: 4px;\">\n<$action-sendmessage $message=\"tm-json-refresh\" />\n<<fa-icon \"retweet\" \"fa-lg fa-fw\">> ''Refresh''\n</$button>\n\n<!-- /* Flatten/Unflatten */ -->\n<$button tooltip=\"Flatten This Json\" class=\"nottc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 1em; padding: 4px;\">\n<$list filter=\"[{!!flat}regexp[^true$]]\" variable=\"\" emptyMessage=\"\"\"<$action-sendmessage $message=\"tm-json-flatten\" />\n<<fa-icon \"list-ul\" \"fa-lg fa-fw\">> ''Flatten''\"\"\" >\n<$action-sendmessage $message=\"tm-json-unflatten\"/>\n<<fa-icon \"share-alt\" \"fa-lg fa-fw\">> ''Unflatten''\n</$list>\n</$button>\n\n<$set name=\"thisEdit\" value={{!!title}}>\n<$set name=\"thisJson\" value={{!!draft.of}}>\n<!-- /* Restore */ -->\n<$list filter=\"[<archive>has[created]]\">\n<$button tooltip=\"Restore This Json from the Archive\" class=\"nottc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 1em; padding: 4px;\">\n    <$action-sendmessage $message=\"tm-json-restore\" />\n    <<fa-icon \"undo\" \"fa-lg fa-fw\">> ''Restore''\n</$button>\n</$list>\n\n<!-- /* Push/Pull */ -->\n<$list filter=\"[<thisJson>suffix[.json]]\">\n<$button tooltip=\"Push or pull the fields (values optional).\" class=\"nottc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 1em; padding: 4px;\">\n    <$action-sendmessage $message=\"tm-modal\" $param=\"$:/plugins/telarus/jsonmangler/modals/PushPull\" thisJson=<<thisJson>> thisEdit=<<thisEdit>> />\n    <<fa-icon \"key\" \"fa-lg fa-fw\">> ''Push / Pull''\n</$button>\n</$list>\n\n<!-- /* Open Archive */ -->\n<$list filter=\"[<archive>has[created]field:flat[true]]\">\n<$button tooltip=\"Open the Archive\" class=\"nottc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 1em; padding: 4px;\">\n<$action-navigate $to=<<archive>> />\n<<fa-icon \"archive\" \"fa-lg fa-fw\">><<fa-icon \"list-ul\" \"fa-lg fa-fw\">> ''Archive''\n</$button>\n</$list>\n<$list filter=\"[<archive>has[created]field:flat[false]]\">\n<$button tooltip=\"Open the Archive\" class=\"nottc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 1em; padding: 4px;\">\n<$action-navigate $to=<<archive>> />\n<<fa-icon \"archive\" \"fa-lg fa-fw\">><<fa-icon \"share-alt\" \"fa-lg fa-fw\">> ''Archive''\n</$button>\n</$list>\n\n</$set>\n</$set>\n</$jsonmangler>\n    </div><div class=\"clear\" style=\"clear: both;\"></div>\n</$list>"
        },
        "$:/plugins/telarus/jsonmangler/license": {
            "title": "$:/plugins/telarus/jsonmangler/license",
            "type": "text/plain",
            "text": "Copyright (c) 2017, Joshua Fontany\r\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        "$:/plugins/telarus/jsonmangler/modals/PushPull": {
            "title": "$:/plugins/telarus/jsonmangler/modals/PushPull",
            "created": "20140912145537860",
            "footer": "",
            "modified": "20171117001451095",
            "subtitle": "''Push or Pull fields between a Json tiddler and its parent.''",
            "type": "text/vnd.tiddlywiki",
            "values": "true",
            "text": "\\define parent() <$list filter=\"[<thisJson>removesuffix[.json]first[]]\"></$list>\n\n''Title:'' <<thisEdit>>\n\n''Parent tiddler:'' <<parent>>\n\n''Include Values?'' <$checkbox tiddler=\"$:/config/JsonPushPullValues\" field=\"text\" checked=\"true\" unchecked=\"false\" default=\"false\"></$checkbox>\n<$tiddler tiddler=<<thisEdit>> >\n<$jsonmangler>\n\n<$list filter=\"[{$:/config/JsonPushPullValues!!text}regexp[^true$]]\" variable=\"\" emptyMessage=\"\"\"<$button tooltip=\"Push Fields & Values\" class=\"nottc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 1em; padding: 4px;\">\n<$action-sendmessage $message=\"tm-json-push\" $param=\"true\" />\n<$action-sendmessage $message=\"tm-close-tiddler\" /> <<fa-icon \"upload\" \"fa-lg\">> ''Push Fields'' </$button>\n<$button tooltip=\"Pull Fields & Values\" class=\"nottc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 1em; padding: 4px;\">\n<$action-sendmessage $message=\"tm-json-pull\" $param=\"true\" />\n<$action-sendmessage $message=\"tm-close-tiddler\" /> <<fa-icon \"download\" \"fa-lg\">> ''Pull Fields'' </$button>\"\"\">\n<$button tooltip=\"Push Fields\" class=\"nottc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 1em; padding: 4px;\">\n<$action-sendmessage $message=\"tm-json-push\" $param=\"false\" />\n<$action-sendmessage $message=\"tm-close-tiddler\" /> <<fa-icon \"upload\" \"fa-lg\">> ''Push Fields'' </$button>\n<$button tooltip=\"Pull Fields\" class=\"nottc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 1em; padding: 4px;\">\n<$action-sendmessage $message=\"tm-json-pull\" $param=\"false\" />\n<$action-sendmessage $message=\"tm-close-tiddler\" /> <<fa-icon \"download\" \"fa-lg\">> ''Pull Fields'' </$button>\n</$list>\n\n</$jsonmangler>\n</$tiddler>\n<$button class=\"nottc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 1em; padding: 4px;\" message=\"tm-close-tiddler\"> <<fa-icon \"times-circle-o\" \"fa-lg\">> ''Cancel''</$button>\n"
        },
        "$:/plugins/telarus/jsonmangler/readme": {
            "title": "$:/plugins/telarus/jsonmangler/readme",
            "text": "This is a json mangler plugin for ~TiddlyWiki.\n\nhttps://github.com/joshuafontany/TW5-JsonManglerPlugin\n\nSee the example Wiki for usage details:\n\nhttps://joshuafontany.github.io/TW5-JsonManglerPlugin/"
        },
        "$:/plugins/telarus/jsonmangler/widgets/jsonmangler.js": {
            "title": "$:/plugins/telarus/jsonmangler/widgets/jsonmangler.js",
            "text": "/*\\\r\ntitle: $:/plugins/telarus/jsonmangler/widgets/jsonmangler.js\r\ntype: application/javascript\r\nmodule-type: widget\r\n\r\nJson mangler widget\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\r\n\r\nvar JsonManglerWidget = function(parseTreeNode,options) {\r\n\tthis.initialise(parseTreeNode,options);\r\n\tthis.addEventListeners([\r\n\t\t{type: \"tm-json-refresh\", handler: \"handleJsonRefreshEvent\"},\r\n\t\t{type: \"tm-json-flatten\", handler: \"handleJsonFlattenEvent\"},\r\n        { type: \"tm-json-unflatten\", handler: \"handleJsonUnflattenEvent\" },\r\n        { type: \"tm-json-restore\", handler: \"handleJsonRestoreEvent\" },\r\n        { type: \"tm-json-push\", handler: \"handleJsonPushEvent\" },\r\n        { type: \"tm-json-pull\", handler: \"handleJsonPullEvent\" }\r\n\t]);\r\n};\r\n\r\n/*\r\nInherit from the base widget class\r\n*/\r\nJsonManglerWidget.prototype = new Widget();\r\n\r\n/*\r\nRender this widget into the DOM\r\n*/\r\nJsonManglerWidget.prototype.render = function (parent, nextSibling) {\r\n    //console.log(\"Render JsonMangler\");\r\n\tthis.parentDomNode = parent;\r\n\tthis.computeAttributes();\r\n\tthis.execute();\r\n\tthis.renderChildren(parent,nextSibling);\r\n};\r\n\r\n/*\r\nCompute the internal state of the widget\r\n*/\r\nJsonManglerWidget.prototype.execute = function() {\r\n\t// Get our parameters\r\n    this.mangleTitle = this.getAttribute(\"tiddler\", this.getVariable(\"currentTiddler\"));\r\n\t// Construct the child widgets\r\n\tthis.makeChildWidgets();\r\n};\r\n\r\n/*\r\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\r\n*/\r\nJsonManglerWidget.prototype.refresh = function(changedTiddlers) {\r\n\tvar changedAttributes = this.computeAttributes();\r\n\tif(changedAttributes.tiddler) {\r\n\t\tthis.refreshSelf();\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn this.refreshChildren(changedTiddlers);\t\t\r\n\t}\r\n};\r\n\r\n/* Utility Functions */\r\nJSON.flatten = function (data) {\r\n    var result = {};\r\n\r\n    function recurse(cur, prop) {\r\n        if (Object(cur) !== cur) {\r\n            result[prop] = cur;\r\n        } else if (Array.isArray(cur)) {\r\n            for (var i = 0, l = cur.length; i < l; i++)\r\n            recurse(cur[i], prop + \"[\" + i + \"]\");\r\n            if (l == 0) result[prop] = [];\r\n        } else {\r\n            var isEmpty = true;\r\n            for (var p in cur) {\r\n                isEmpty = false;\r\n                recurse(cur[p], prop ? prop + \".\" + p : p);\r\n            }\r\n            if (isEmpty && prop) result[prop] = {};\r\n        }\r\n    }\r\n    recurse(data, \"\");\r\n    //console.log(\"Json Flatten\");\r\n    return result;\r\n};\r\n\r\nJSON.unflatten = function (data) {\r\n    \"use strict\";\r\n    if (Object(data) !== data || Array.isArray(data)) return data;\r\n    var regex = /\\.?([^.\\[\\]]+)|\\[(\\d+)\\]/g,\r\n        resultholder = {};\r\n    for (var p in data) {\r\n        var cur = resultholder,\r\n            prop = \"\",\r\n            m;\r\n        while (m = regex.exec(p)) {\r\n            cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\r\n            prop = m[2] || m[1];\r\n        }\r\n        cur[prop] = data[p];\r\n    }\r\n    //console.log(\"Json Unflatten\");\r\n    return resultholder[\"\"] || resultholder;\r\n};\r\n\r\nJSON.isFlat = function (data) {\r\n    var objKeys = Object.keys(data),\r\n        flat = true;\r\n    if (objKeys) {\r\n        objKeys.forEach(function (d) {\r\n            var a = data[d];\r\n            if ((!!a) && (a.constructor === Array)) {\r\n                flat = false;\r\n            }\r\n            if ((!!a) && (a.constructor === Object)) {\r\n                flat = false;\r\n            }\r\n        })\r\n    }\r\n    return flat;\r\n};\r\n\r\nJSON.orderedStringify = function (data) {\r\n        const allKeys = [];\r\n        JSON.stringify(data, (k, v) => { allKeys.push(k); return v; });\r\n        return JSON.stringify(data, allKeys.sort(), 4);\r\n};\r\n\r\n\r\n\r\n/* Event Functions */\r\nJsonManglerWidget.prototype.handleJsonRefreshEvent = function(event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    if (tiddler && tiddler.fields.text) {\r\n        var result, jsonObj,\r\n            a = tiddler.fields.title + \"!!text\",\r\n            b = $tw.wiki.getTextReference(a);\r\n        if (!b || 0 == b.length) {\r\n            return true;\r\n        }\r\n\r\n        try {\r\n            jsonObj = JSON.parse(b);\r\n        } catch (e) {\r\n            var modification = this.wiki.getModificationFields();\r\n            modification.text = \"= Delete This Text and Repair Json Object! =\\n* \" + e + \":\\n\" + b;\r\n            this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n            return true;\r\n        }\r\n\r\n        /*Don't Archive*/\r\n        /*Refresh & test for 'Flatness' */\r\n        var modification = this.wiki.getModificationFields();\r\n        result = JSON.orderedStringify(jsonObj);\r\n        modification.text = result;\r\n        modification.flat = (JSON.isFlat(jsonObj)) ? \"true\" : \"false\";\r\n        //console.log(JSON.isFlat(jsonObj) + \" Flat: \" + modification.flat);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n    }\r\n\treturn true;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonFlattenEvent= function(event) {\r\n\tvar tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n\tif(tiddler && tiddler.fields.text) {\r\n\t\tvar result, jsonObj,\r\n\t\t\ta=tiddler.fields.title+\"!!text\" ,\r\n\t\t\tb =$tw.wiki.getTextReference(a);\r\n\t\tif(!b|| 0 == b.length){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t    jsonObj = JSON.parse(b);\r\n\t\t} catch (e) {\r\n            var modification = this.wiki.getModificationFields();\r\n            modification.text = \"= Delete This Text and Repair Json Object! =\\n* \" + e + \":\\n\" + b;\r\n            this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n            return true;\r\n\t\t}\r\n\r\n        /*Archive*/\r\n        var draftName, archiveTiddler, archiveTitle, archiveMods;\r\n\r\n        draftName = tiddler.fields[\"draft.of\"];\r\n        archiveTiddler = this.wiki.getTiddler(draftName);\r\n        archiveTitle = \"$:/archive/json/\" + draftName;\r\n\r\n        archiveMods = this.wiki.getModificationFields();\r\n        archiveMods.title = archiveTitle;\r\n        archiveMods.text = tiddler.fields.text;\r\n        archiveMods.flat = tiddler.fields.flat;\r\n        this.wiki.addTiddler(new $tw.Tiddler(archiveTiddler, archiveMods));\r\n\r\n\t\t/*Flatten*/\r\n        var modification = this.wiki.getModificationFields();\r\n        result = JSON.orderedStringify(JSON.flatten(jsonObj));\r\n        modification.text = result;\r\n        modification.flat = \"true\";\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));\t\t\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonUnflattenEvent= function(event) {\r\n\tvar tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n\tif(tiddler && tiddler.fields.text) {\r\n\t\tvar result, jsonObj,\r\n\t\t\ta=tiddler.fields.title+\"!!text\" ,\r\n\t\t\tb =$tw.wiki.getTextReference(a);\r\n\t\tif(!b|| 0 == b.length){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t    jsonObj = JSON.parse(b);\r\n        } catch (e) {\r\n            var modification = this.wiki.getModificationFields();\r\n            modification.text = \"= Delete This Text and Repair Json Object! =\\n* \"+e+\":\\n\"+b;\r\n            this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n        /*Archive*/\r\n        var draftName, archiveTiddler, archiveTitle, archiveMods;\r\n\r\n        draftName = tiddler.fields[\"draft.of\"];\r\n        archiveTiddler = this.wiki.getTiddler(draftName);\r\n        archiveTitle = \"$:/archive/json/\" + draftName;\r\n\r\n        archiveMods = this.wiki.getModificationFields();\r\n        archiveMods.title = archiveTitle;\r\n        archiveMods.text = tiddler.fields.text;\r\n        archiveMods.flat = tiddler.fields.flat;\r\n        this.wiki.addTiddler(new $tw.Tiddler(archiveTiddler, archiveMods));\r\n\r\n\t\t/*Unflatten*/\r\n        var modification = this.wiki.getModificationFields();\r\n        result = JSON.orderedStringify(JSON.unflatten(jsonObj));\r\n        modification.text = result;\r\n        modification.flat = \"false\";\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));\t\t\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonRestoreEvent = function (event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    if (tiddler) {\r\n        /*Get Archive Json Data*/\r\n        var draftName, archiveTiddler, archiveTitle, archiveMods;\r\n        draftName = tiddler.fields[\"draft.of\"];\r\n        archiveTitle = \"$:/archive/json/\" + draftName;\r\n        archiveTiddler = this.wiki.getTiddler(archiveTitle);\r\n\r\n        /*Test and Restore*/\r\n        var a = archiveTiddler.fields.title + \"!!text\",\r\n            b = $tw.wiki.getTextReference(a);\r\n        if (!b || 0 == b.length) {\r\n            return true;\r\n        }\r\n        var modification = this.wiki.getModificationFields();\r\n        modification.text = b;\r\n        modification.flat = archiveTiddler.fields.flat;\r\n        //console.log(\"Flat: \" + archiveTiddler.fields.flat);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n    }\r\n    return true;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonPushEvent = function (event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    if (tiddler && tiddler.fields.flat == \"true\") {\r\n        /*Get Json Data*/\r\n        var draftName, parentTiddler, parentFields, parentTitle, parentMods;\r\n        draftName = tiddler.fields[\"draft.of\"] || tiddler.fields.title;\r\n        parentTitle = draftName.replace(\".json\", \"\");\r\n        parentTiddler = this.wiki.getTiddler(parentTitle) || { title: parentTitle};\r\n        //console.log(\"ParentTiddler: \" + JSON.stringify(parentTiddler, null, 4));\r\n        \r\n        var a = tiddler.fields.title + \"!!text\",\r\n            b = $tw.wiki.getTextReference(a), jsonObj;\r\n        if (!b || 0 == b.length) {\r\n            return true;\r\n        }\r\n        try {\r\n            jsonObj = JSON.parse(b);\r\n        } catch (e) {\r\n            var modification = this.wiki.getModificationFields();\r\n            modification.text = \"= Delete This Text and Repair Json Object! =\\n* \" + e + \":\\n\" + b;\r\n            this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n            return true;\r\n        }\r\n\r\n        /*Test and Push*/\r\n        var modification = this.wiki.getModificationFields(),\r\n            adminFields = [\"tags\", \"title\", \"type\", \"bag\", \"revision\", \"modified\", \"modifier\", \"created\", \"creator\"];\r\n        Object.keys(jsonObj).sort().forEach(function (k) {\r\n            if (adminFields.indexOf(k) == -1) {\r\n                var cleanKey = k.replace(/\\[/g, \"-_\");\r\n                cleanKey = cleanKey.replace(/\\]/g, \"_\");\r\n                if (\"true\" == event.param.trim()) {\r\n                    modification[cleanKey] = jsonObj[k] || \"\";\r\n                }\r\n                else {\r\n                    modification[cleanKey] = parentTiddler.fields[cleanKey] || \"\";\r\n                }\r\n            }    \r\n        });\r\n            this.wiki.addTiddler(new $tw.Tiddler(parentTiddler, modification));\r\n    }\r\n    return true;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonPullEvent = function (event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    if (tiddler) {\r\n        /*Get Json Data*/\r\n        var draftName, parentTiddler, parentFields, parentTitle, parentMods;\r\n        draftName = tiddler.fields[\"draft.of\"] || tiddler.fields.title;;\r\n        parentTitle = draftName.replace(\".json\", \"\");\r\n        parentTiddler = this.wiki.getTiddler(parentTitle);\r\n\r\n        /*Test and Pull*/\r\n        if (!parentTiddler) {\r\n            return;\r\n        }\r\n        var a = tiddler.fields.title + \"!!text\",\r\n            b = $tw.wiki.getTextReference(a), jsonObj;\r\n        if (!b || 0 == b.length) {\r\n            jsonObj = {};\r\n        }\r\n        else {\r\n            try {\r\n                jsonObj = JSON.parse(b);\r\n            } catch (e) {\r\n                var modification = this.wiki.getModificationFields();\r\n                modification.text = \"= Delete This Text and Repair Json Object! =\\n* \" + e + \":\\n\" + b;\r\n                this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var modification = this.wiki.getModificationFields(),\r\n            result = {},\r\n            adminFields = [\"tags\", \"title\", \"type\", \"bag\", \"revision\", \"modified\", \"modifier\", \"created\", \"creator\"],\r\n            keysToIterate = Object.keys(parentTiddler.fields).concat(Object.keys(jsonObj).filter(function (item) {\r\n                item = item.replace(/\\[/g, \"-_\");\r\n                item = item.replace(/\\]/g, \"_\");\r\n                return Object.keys(parentTiddler.fields).indexOf(item) < 0;\r\n            }));\r\n\r\n        keysToIterate.sort().forEach(function (k) {\r\n            if (adminFields.indexOf(k) == -1) {\r\n                var cleanKey = k.replace(/-_/g, \"[\");\r\n                cleanKey = cleanKey.replace(/_/g, \"]\");\r\n                if (\"true\" == event.param.trim()) {\r\n                    result[cleanKey] = parentTiddler.fields[k] || \"\";\r\n                }\r\n                else {\r\n                    result[cleanKey] = jsonObj[cleanKey] || \"\";\r\n                }\r\n                if ({} == result[cleanKey]) {\r\n                    result[cleanKey] = \"\";\r\n                }\r\n            }\r\n        });\r\n        modification.text = JSON.orderedStringify(result);\r\n        modification.flat = \"true\";\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n    }\r\n    return true;\r\n};\r\n\r\nexports.jsonmangler = JsonManglerWidget;\r\n\r\n})();\r\n",
            "type": "application/javascript",
            "module-type": "widget",
            "created": "20170901005832046",
            "creator": "0.0.0.0",
            "modified": "20170906024739499",
            "modifier": "Josh F",
            "tags": ""
        }
    }
}